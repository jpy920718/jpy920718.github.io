<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云深不知处</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jpy920718.github.io/"/>
  <updated>2019-06-11T16:22:37.831Z</updated>
  <id>https://jpy920718.github.io/</id>
  
  <author>
    <name>纪朋元</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://jpy920718.github.io/2019/06/12/hello-world/"/>
    <id>https://jpy920718.github.io/2019/06/12/hello-world/</id>
    <published>2019-06-11T16:22:37.831Z</published>
    <updated>2019-06-11T16:22:37.831Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://jpy920718.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>发布自己的npm包</title>
    <link href="https://jpy920718.github.io/2019/05/12/%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84npm%E5%8C%85/"/>
    <id>https://jpy920718.github.io/2019/05/12/发布自己的npm包/</id>
    <published>2019-05-12T09:52:57.000Z</published>
    <updated>2019-06-11T16:22:37.832Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-npmjs-com-注册账号"><a href="#1-npmjs-com-注册账号" class="headerlink" title="1. npmjs.com 注册账号"></a>1. <a href="https://npmjs.com" target="_blank" rel="noopener">npmjs.com</a> 注册账号</h3><h3 id="2-初始化项目"><a href="#2-初始化项目" class="headerlink" title="2. 初始化项目"></a>2. 初始化项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir jpy-test-package</span><br><span class="line">$ <span class="built_in">cd</span> jpy-test-package</span><br><span class="line">$ npm init</span><br></pre></td></tr></table></figure><h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jpyPackageDemo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test first npm package!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = jpyPackageDemo();</span><br></pre></td></tr></table></figure><h3 id="4-发布"><a href="#4-发布" class="headerlink" title="4. 发布"></a>4. 发布</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm login</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ npm publish</span><br></pre></td></tr></table></figure><h3 id="5-更新"><a href="#5-更新" class="headerlink" title="5. 更新"></a>5. 更新</h3><ul><li><p>更改源代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jpyPackageDemo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test first npm update package!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = jpyPackageDemo();</span><br></pre></td></tr></table></figure></li><li><p>更新至npm</p><blockquote><p>npm version <type> : patch, minor,  major(补丁，小改，大改)</type></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm version minor</span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="https://www.cnblogs.com/penghuwan/p/6973702.html#_label3_0" target="_blank" rel="noopener">参考</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-npmjs-com-注册账号&quot;&gt;&lt;a href=&quot;#1-npmjs-com-注册账号&quot; class=&quot;headerlink&quot; title=&quot;1. npmjs.com 注册账号&quot;&gt;&lt;/a&gt;1. &lt;a href=&quot;https://npmjs.com&quot; target
      
    
    </summary>
    
    
      <category term="npm" scheme="https://jpy920718.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Navicat连接Mysql8时出现2059错误解决方法</title>
    <link href="https://jpy920718.github.io/2019/02/20/Navicat%E8%BF%9E%E6%8E%A5Mysql8%E6%97%B6%E5%87%BA%E7%8E%B02059%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://jpy920718.github.io/2019/02/20/Navicat连接Mysql8时出现2059错误解决方法/</id>
    <published>2019-02-20T08:03:18.000Z</published>
    <updated>2019-06-11T16:22:37.831Z</updated>
    
    <content type="html"><![CDATA[<p><a href="./Docker下安装Mysql.md">Docker下安装Mysql</a></p><p>当使用低版本的navicat链接mysql8+版本是 会出现2509的错误，原因是因为mysql8+之后使用的caching_sha2_password验证方式，而之前的mysql版本中加密规则是mysql_native_password。<br>解决方法就是将验证方式改为以前版本(5.7及以下)使用的验证方式mysql_native_password</p><p>windows：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure><p>Mac：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER user <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'123456'</span> PASSWORD EXPIRE NEVER;</span><br><span class="line">ALTER user <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'123456’;</span></span><br><span class="line"><span class="string">FLUSH PRIVILEGES;</span></span><br></pre></td></tr></table></figure><p>‘root’可以改为你自己定义的用户名，’localhost’指的是该用户开放的IP，可以是’localhost’(仅本机访问，相当于127.0.0.1)，可以是具体的’<em>.</em>.<em>.</em>‘(具体某一IP)，也可以时’%’(所有IP均可访问)。<br>password = 你设置的密码</p><p>参考：<a href="https://blog.csdn.net/qq_35436635/article/details/80126029" target="_blank" rel="noopener">https://blog.csdn.net/qq_35436635/article/details/80126029</a></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;./Docker下安装Mysql.md&quot;&gt;Docker下安装Mysql&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当使用低版本的navicat链接mysql8+版本是 会出现2509的错误，原因是因为mysql8+之后使用的caching_sha2_password验证方式，而之前的mysql版本中加密规则是mysql_native_password。&lt;br&gt;解决方法就是将验证方式改为以前版本(5.7及以下)使用的验证方式mysql_native_password&lt;/p&gt;
&lt;p&gt;windows：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ALTER USER &lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt; IDENTIFIED WITH mysql_native_password BY &lt;span class=&quot;string&quot;&gt;&#39;password&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Mac：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ALTER user &lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&#39;%&#39;&lt;/span&gt; IDENTIFIED BY &lt;span class=&quot;string&quot;&gt;&#39;123456&#39;&lt;/span&gt; PASSWORD EXPIRE NEVER;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ALTER user &lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&#39;%&#39;&lt;/span&gt; IDENTIFIED WITH mysql_native_password BY &lt;span class=&quot;string&quot;&gt;&#39;123456’;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;FLUSH PRIVILEGES;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;‘root’可以改为你自己定义的用户名，’localhost’指的是该用户开放的IP，可以是’localhost’(仅本机访问，相当于127.0.0.1)，可以是具体的’&lt;em&gt;.&lt;/em&gt;.&lt;em&gt;.&lt;/em&gt;‘(具体某一IP)，也可以时’%’(所有IP均可访问)。&lt;br&gt;password = 你设置的密码&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://blog.csdn.net/qq_35436635/article/details/80126029&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_35436635/article/details/80126029&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mysql" scheme="https://jpy920718.github.io/tags/Mysql/"/>
    
      <category term="Navicat" scheme="https://jpy920718.github.io/tags/Navicat/"/>
    
  </entry>
  
  <entry>
    <title>Docker下安装mysql</title>
    <link href="https://jpy920718.github.io/2019/02/20/Docker%E4%B8%8B%E5%AE%89%E8%A3%85Mysql/"/>
    <id>https://jpy920718.github.io/2019/02/20/Docker下安装Mysql/</id>
    <published>2019-02-20T03:54:20.000Z</published>
    <updated>2019-06-11T16:22:37.830Z</updated>
    
    <content type="html"><![CDATA[<p><del>假设已经安装过docker</del></p><h4 id="docker-查找镜像"><a href="#docker-查找镜像" class="headerlink" title="docker 查找镜像"></a>docker 查找镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><h4 id="docker-拉取镜像"><a href="#docker-拉取镜像" class="headerlink" title="docker 拉取镜像"></a>docker 拉取镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql // 安装最新mysql</span><br><span class="line">docker pull mysql:8.0.13 // 安装指定版本</span><br></pre></td></tr></table></figure><h4 id="docker-查看本地镜像列表"><a href="#docker-查看本地镜像列表" class="headerlink" title="docker 查看本地镜像列表"></a>docker 查看本地镜像列表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="/images/6fbdb6bc589bbbdd1e4cffd9d5970690.jpeg" alt="6fbdb6bc589bbbdd1e4cffd9d5970690.jpeg"></p><h4 id="docker-启动mysql"><a href="#docker-启动mysql" class="headerlink" title="docker 启动mysql"></a>docker 启动mysql</h4><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br></pre></td></tr></table></figure><p><img src="/images/2cafd4485451f000b262fe788c63ba90.jpeg" alt="2cafd4485451f000b262fe788c63ba90.jpeg"></p><p>出现如上图的错误，通过错误提示，刚刚设置的容器名已存在，删除或重命名，选择删除！！！</p><h4 id="docker-删除容器"><a href="#docker-删除容器" class="headerlink" title="docker 删除容器"></a>docker 删除容器</h4><ol><li>列出容器列表</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a // 列出所有容器列表包括未运行的</span><br></pre></td></tr></table></figure><p><img src="/images/d659a4b169ae7ea93d46cc0ce015ba15.jpeg" alt="d659a4b169ae7ea93d46cc0ce015ba15.jpeg"></p><p>或者直接查看容器id</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a -q // 列出所有容器id</span><br></pre></td></tr></table></figure><p><img src="/images/b885f9e3d98887cc93fcb67cfa15ebb6.jpeg" alt="b885f9e3d98887cc93fcb67cfa15ebb6.jpeg"></p><ol start="2"><li><p>删除<br>docker rm：删除一个或多少容器<br>docker rm [OPTIONS] CONTAINER [CONTAINER.]</p><p> -f :通过SIGKILL信号强制删除一个运行中的容器</p><p> -l :移除容器间的网络连接，而非容器本身</p><p> -v :-v 删除与容器关联的卷</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f 72d8c2388a8c</span><br></pre></td></tr></table></figure><p><img src="/images/a62dbeb9173d646dc467762c8c51831f.jpeg" alt="a62dbeb9173d646dc467762c8c51831f.jpeg"></p><p>在执行查看列表命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a -q</span><br></pre></td></tr></table></figure><p><img src="/images/935497cd7a8dcdf3ad4d51ad4ba32755.jpeg" alt="935497cd7a8dcdf3ad4d51ad4ba32755.jpeg"></p><p>此时容器已被删除，再去执行启动mysql的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br></pre></td></tr></table></figure><p><img src="/images/ced0394304523c95ee6430bb6a2e3596.jpeg" alt="ced0394304523c95ee6430bb6a2e3596.jpeg"><br>启动成功</p><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql bash</span><br></pre></td></tr></table></figure><p><img src="/images/c08845d5e9744730b1ccb1aa4fea395b.png" alt="c08845d5e9744730b1ccb1aa4fea395b.png"></p><h4 id="登录mysql"><a href="#登录mysql" class="headerlink" title="登录mysql"></a>登录mysql</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><img src="/images/fbf41abb6ac233da9ec3e02d2f2132bb.png" alt="fbf41abb6ac233da9ec3e02d2f2132bb.png"></p><p>控制台docker安装mysql和连接mysql完成。</p><blockquote><p>如果使用navicat 连接mysql会出现客户端连接不上的问题解决方法</p><ol><li>降低mysql版本低于8</li><li>查看下一遍文章可看到解决问题</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;假设已经安装过docker&lt;/del&gt;&lt;/p&gt;
&lt;h4 id=&quot;docker-查找镜像&quot;&gt;&lt;a href=&quot;#docker-查找镜像&quot; class=&quot;headerlink&quot; title=&quot;docker 查找镜像&quot;&gt;&lt;/a&gt;docker 查找镜像&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker search mysql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;docker-拉取镜像&quot;&gt;&lt;a href=&quot;#docker-拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;docker 拉取镜像&quot;&gt;&lt;/a&gt;docker 拉取镜像&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker pull mysql // 安装最新mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker pull mysql:8.0.13 // 安装指定版本&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;docker-查看本地镜像列表&quot;&gt;&lt;a href=&quot;#docker-查看本地镜像列表&quot; class=&quot;headerlink&quot; title=&quot;docker 查看本地镜像列表&quot;&gt;&lt;/a&gt;docker 查看本地镜像列表&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker images&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/images/6fbdb6bc589bbbdd1e4cffd9d5970690.jpeg&quot; alt=&quot;6fbdb6bc589bbbdd1e4cffd9d5970690.jpeg&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;docker-启动mysql&quot;&gt;&lt;a href=&quot;#docker-启动mysql&quot; class=&quot;headerlink&quot; title=&quot;docker 启动mysql&quot;&gt;&lt;/a&gt;docker 启动mysql&lt;/h4&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://jpy920718.github.io/tags/Docker/"/>
    
      <category term="Mysql" scheme="https://jpy920718.github.io/tags/Mysql/"/>
    
      <category term="Navicat" scheme="https://jpy920718.github.io/tags/Navicat/"/>
    
  </entry>
  
  <entry>
    <title>学习Typescript类</title>
    <link href="https://jpy920718.github.io/2019/01/29/%E5%AD%A6%E4%B9%A0Typescript%E7%B1%BB/"/>
    <id>https://jpy920718.github.io/2019/01/29/学习Typescript类/</id>
    <published>2019-01-29T15:40:42.000Z</published>
    <updated>2019-06-11T16:22:37.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="es5的类"><a href="#es5的类" class="headerlink" title="es5的类"></a>es5的类</h1><h3 id="es5中定义一个简单的类"><a href="#es5中定义一个简单的类" class="headerlink" title="es5中定义一个简单的类"></a>es5中定义一个简单的类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=<span class="string">'jpy'</span>;</span><br><span class="line">    <span class="keyword">this</span>.age=<span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br></pre></td></tr></table></figure><h3 id="构造函数和原型链中增加方法"><a href="#构造函数和原型链中增加方法" class="headerlink" title="构造函数和原型链中增加方法"></a>构造函数和原型链中增加方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=<span class="string">'jpy'</span>;</span><br><span class="line">    <span class="keyword">this</span>.age=<span class="number">18</span>;</span><br><span class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在走路`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.run();<span class="comment">// jpy在走路</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在原型链上定义属性和方法，</span></span><br><span class="line">Person.prototype.sex = <span class="string">'男'</span>;</span><br><span class="line">Person.prototype.work = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在工作`</span>)</span><br><span class="line">&#125;</span><br><span class="line">person.work();<span class="comment">// jpy在工作</span></span><br></pre></td></tr></table></figure><p>原型链上的属性和方法会被多个实例共享但是构造函数不会</p><h3 id="类中的静态方法"><a href="#类中的静态方法" class="headerlink" title="类中的静态方法"></a>类中的静态方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=<span class="string">'jpy'</span>;</span><br><span class="line">    <span class="keyword">this</span>.age=<span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Person.getInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`姓名：<span class="subst">$&#123;Person.name&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line">Person.getInfo();<span class="comment">//姓名：jpy</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="继承-原型链-对象冒充的组合继承模式"><a href="#继承-原型链-对象冒充的组合继承模式" class="headerlink" title="继承 原型链+对象冒充的组合继承模式."></a>继承 原型链+对象冒充的组合继承模式.</h3><h4 id="对象冒充继承可以继承Person构造函数里面的属性和方法，但是不能继承Person原型链上的属性和方法"><a href="#对象冒充继承可以继承Person构造函数里面的属性和方法，但是不能继承Person原型链上的属性和方法" class="headerlink" title="对象冒充继承可以继承Person构造函数里面的属性和方法，但是不能继承Person原型链上的属性和方法"></a>对象冒充继承可以继承Person构造函数里面的属性和方法，但是不能继承Person原型链上的属性和方法</h4><h4 id="原型链继承可以继承Person的构造函数的属性和方法，也能继承原型链上的方法，但是实例化子类时无法给父类传参。"><a href="#原型链继承可以继承Person的构造函数的属性和方法，也能继承原型链上的方法，但是实例化子类时无法给父类传参。" class="headerlink" title="原型链继承可以继承Person的构造函数的属性和方法，也能继承原型链上的方法，但是实例化子类时无法给父类传参。"></a>原型链继承可以继承Person的构造函数的属性和方法，也能继承原型链上的方法，但是实例化子类时无法给父类传参。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Web</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>);<span class="comment">//对象冒充实现继承</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web()</span><br><span class="line">w.run();<span class="comment">//可以继承Person里面的属性和方法，但是不能继承Person原型链上的属性和方法</span></span><br><span class="line">w.work();<span class="comment">// console.error(</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Web</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Person.call(<span class="keyword">this</span>);<span class="comment">//对象冒充实现继承</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 原型链实现继承</span></span><br><span class="line">    web.prototype = <span class="keyword">new</span> Person();</span><br><span class="line">    w.run();<span class="comment">//ok</span></span><br><span class="line">    w.work();<span class="comment">//ok</span></span><br></pre></td></tr></table></figure><h3 id="原型链-构造函数的组合继承"><a href="#原型链-构造函数的组合继承" class="headerlink" title="原型链+构造函数的组合继承"></a>原型链+构造函数的组合继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Web</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>, name, age); <span class="comment">//对象冒充可以继承Person构造函数里面的属性和方法，但是不能继承Person原型链上的属性和方法</span></span><br><span class="line">&#125;</span><br><span class="line">Web.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web(<span class="string">'张三'</span>, <span class="number">22</span>);</span><br></pre></td></tr></table></figure><h4 id="另一种写法-直接继承父类的原型链"><a href="#另一种写法-直接继承父类的原型链" class="headerlink" title="另一种写法 直接继承父类的原型链"></a>另一种写法 直接继承父类的原型链</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Web</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>, name, age); <span class="comment">//对象冒充可以继承Person构造函数里面的属性和方法，但是不能继承Person原型链上的属性和方法</span></span><br><span class="line">&#125;</span><br><span class="line">Web.prototype = Person.prototype;</span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web(<span class="string">'张三'</span>, <span class="number">22</span>);</span><br><span class="line">w.run();</span><br></pre></td></tr></table></figure><h1 id="ts中类"><a href="#ts中类" class="headerlink" title="ts中类"></a>ts中类</h1><h3 id="通过class-关键字来定义"><a href="#通过class-关键字来定义" class="headerlink" title="通过class 关键字来定义"></a>通过class 关键字来定义</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    name: string; <span class="comment">//属性， 省略了public关键词</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: string)&#123; <span class="comment">//构造函数  实例化类的时候触发的方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    run(): <span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在跑步`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'张三'</span>)；</span><br><span class="line">p.run();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    name: string; <span class="comment">//属性， 省略了public关键词</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: string)&#123; <span class="comment">//构造函数  实例化类的时候触发的方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    run(): <span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在跑步`</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    getName():string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    setName(name:string):<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'张三'</span>)；</span><br><span class="line">p.getName(); <span class="comment">// '张三'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.setName(<span class="string">'李四'</span>)；</span><br><span class="line">p.getName();<span class="comment">//‘李四’</span></span><br></pre></td></tr></table></figure><h3 id="ts中实现继承-通过extends、super"><a href="#ts中实现继承-通过extends、super" class="headerlink" title="ts中实现继承 通过extends、super"></a>ts中实现继承 通过extends、super</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    name: string; <span class="comment">//属性， 省略了public关键词</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: string)&#123; <span class="comment">//构造函数  实例化类的时候触发的方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    run(): string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在跑步`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'王五'</span>)</span><br><span class="line">p.run();<span class="comment">//王五在跑步</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开始实现继承, 在构造函数里使用super</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    |<span class="keyword">constructor</span>(name：string)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);<span class="comment">//初始化父类的构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> w = <span class="keyword">new</span> Web(<span class="string">'李四'</span>)</span><br><span class="line">w.run();<span class="comment">//李四在跑步</span></span><br></pre></td></tr></table></figure><h3 id="ts中继承的探讨"><a href="#ts中继承的探讨" class="headerlink" title="ts中继承的探讨"></a>ts中继承的探讨</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    name: string; <span class="comment">//属性， 省略了public关键词</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: string)&#123; <span class="comment">//构造函数  实例化类的时候触发的方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    run(): string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在跑步`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    |<span class="keyword">constructor</span>(name：string)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);<span class="comment">//初始化父类的构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    run(): string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在跑步--子类`</span></span><br><span class="line">    &#125;</span><br><span class="line">    work():string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在工作--子类`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> w = <span class="keyword">new</span> Web(<span class="string">'李四'</span>)；</span><br><span class="line">w.run();<span class="comment">//李四在跑步--子类</span></span><br><span class="line">w.work();<span class="comment">//李四在工作--子类</span></span><br></pre></td></tr></table></figure><blockquote><p>当子类中的方法与父类的方法相同时执行子类的方法</p></blockquote><h1 id="ts类里的修饰符，在typescript-里定义属性时有三总修饰符-public-protected-private"><a href="#ts类里的修饰符，在typescript-里定义属性时有三总修饰符-public-protected-private" class="headerlink" title="ts类里的修饰符，在typescript 里定义属性时有三总修饰符 public protected private"></a>ts类里的修饰符，在typescript 里定义属性时有三总修饰符 public protected private</h1><h3 id="public：公有-在类里面、-子类里、-类外面都可以访问"><a href="#public：公有-在类里面、-子类里、-类外面都可以访问" class="headerlink" title="public：公有   在类里面、  子类里、 类外面都可以访问"></a>public：公有   在类里面、  子类里、 类外面都可以访问</h3><h4 id="类里面访问公有属性"><a href="#类里面访问公有属性" class="headerlink" title="类里面访问公有属性"></a>类里面访问公有属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    public name: string; <span class="comment">//属性， 省略了public关键词</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: string)&#123; <span class="comment">//构造函数  实例化类的时候触发的方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    run(): string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在跑步`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'张三'</span>)；</span><br><span class="line">p.run();<span class="comment">//张三在跑步</span></span><br></pre></td></tr></table></figure><h4 id="子类中访问公有属性"><a href="#子类中访问公有属性" class="headerlink" title="子类中访问公有属性"></a>子类中访问公有属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    public name: string; <span class="comment">//属性， 省略了public关键词</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: string)&#123; <span class="comment">//构造函数  实例化类的时候触发的方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    run(): string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在跑步`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name:string)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    work(): string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在工作`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> w = <span class="keyword">new</span> Web(<span class="string">'李四'</span>);</span><br><span class="line">w.work();<span class="comment">// 李四在工作</span></span><br></pre></td></tr></table></figure><h4 id="在类外面访问公有属性"><a href="#在类外面访问公有属性" class="headerlink" title="在类外面访问公有属性"></a>在类外面访问公有属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    public name: string; <span class="comment">//属性， 省略了public关键词</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: string)&#123; <span class="comment">//构造函数  实例化类的时候触发的方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    run(): string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在跑步`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'哈哈'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.name); <span class="comment">//哈哈</span></span><br></pre></td></tr></table></figure><h3 id="protected-保护类-在类里面可以方位、-子类里面可以访问，但是在类外面是不可以访问的"><a href="#protected-保护类-在类里面可以方位、-子类里面可以访问，但是在类外面是不可以访问的" class="headerlink" title="protected: 保护类   在类里面可以方位、 子类里面可以访问，但是在类外面是不可以访问的"></a>protected: 保护类   在类里面可以方位、 子类里面可以访问，但是在类外面是不可以访问的</h3><h4 id="类里面访问保护protected属性"><a href="#类里面访问保护protected属性" class="headerlink" title="类里面访问保护protected属性"></a>类里面访问保护protected属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    protected name: string; <span class="comment">//属性， 省略了public关键词</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: string)&#123; <span class="comment">//构造函数  实例化类的时候触发的方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    run(): string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在跑步`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'张三'</span>)；</span><br><span class="line">p.run();<span class="comment">//张三在跑步</span></span><br></pre></td></tr></table></figure><h4 id="子类中访问保护protected属性"><a href="#子类中访问保护protected属性" class="headerlink" title="子类中访问保护protected属性"></a>子类中访问保护protected属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    protected name: string; <span class="comment">//属性， 省略了public关键词</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: string)&#123; <span class="comment">//构造函数  实例化类的时候触发的方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    run(): string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在跑步`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name:string)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    work(): string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在工作`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> w = <span class="keyword">new</span> Web(<span class="string">'李四'</span>);</span><br><span class="line">w.work();<span class="comment">// 李四在工作</span></span><br></pre></td></tr></table></figure><h4 id="在类外面访问保护protected属性"><a href="#在类外面访问保护protected属性" class="headerlink" title="在类外面访问保护protected属性"></a>在类外面访问保护protected属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    protected name: string; <span class="comment">//属性， 省略了public关键词</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: string)&#123; <span class="comment">//构造函数  实例化类的时候触发的方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    run(): string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在跑步`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'哈哈'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.name); <span class="comment">//error，编译为es5没有问题但在ts中是错误的</span></span><br></pre></td></tr></table></figure><h3 id="private-私有类-在类里面可以访问，但是在子类、类外面是不可以访问的"><a href="#private-私有类-在类里面可以访问，但是在子类、类外面是不可以访问的" class="headerlink" title="private:私有类 在类里面可以访问，但是在子类、类外面是不可以访问的"></a>private:私有类 在类里面可以访问，但是在子类、类外面是不可以访问的</h3><h4 id="类里面访问私有private属性"><a href="#类里面访问私有private属性" class="headerlink" title="类里面访问私有private属性"></a>类里面访问私有private属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    private name: string; <span class="comment">//属性， 省略了public关键词</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: string)&#123; <span class="comment">//构造函数  实例化类的时候触发的方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    run(): string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在跑步`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'张三'</span>)；</span><br><span class="line">p.run();<span class="comment">//张三在跑步</span></span><br></pre></td></tr></table></figure><h4 id="子类中访问私有private属性"><a href="#子类中访问私有private属性" class="headerlink" title="子类中访问私有private属性"></a>子类中访问私有private属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    private name: string; <span class="comment">//属性， 省略了public关键词</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: string)&#123; <span class="comment">//构造函数  实例化类的时候触发的方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    run(): string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在跑步`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name:string)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    work(): string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在工作`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> w = <span class="keyword">new</span> Web(<span class="string">'李四'</span>);</span><br><span class="line">w.work();<span class="comment">// error 编译为es5没有问题但在ts中是错误的</span></span><br></pre></td></tr></table></figure><h4 id="在类外面访问私有private属性"><a href="#在类外面访问私有private属性" class="headerlink" title="在类外面访问私有private属性"></a>在类外面访问私有private属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    private name: string; <span class="comment">//属性， 省略了public关键词</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: string)&#123; <span class="comment">//构造函数  实例化类的时候触发的方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    run(): string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>在跑步`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'哈哈'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.name); <span class="comment">//error，编译为es5没有问题但在ts中是错误的</span></span><br></pre></td></tr></table></figure><h4 id="定义属性时未加修饰符时，默认为public"><a href="#定义属性时未加修饰符时，默认为public" class="headerlink" title="定义属性时未加修饰符时，默认为public"></a>定义属性时未加修饰符时，默认为public</h4>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;es5的类&quot;&gt;&lt;a href=&quot;#es5的类&quot; class=&quot;headerlink&quot; title=&quot;es5的类&quot;&gt;&lt;/a&gt;es5的类&lt;/h1&gt;&lt;h3 id=&quot;es5中定义一个简单的类&quot;&gt;&lt;a href=&quot;#es5中定义一个简单的类&quot; class=&quot;headerlink&quot; title=&quot;es5中定义一个简单的类&quot;&gt;&lt;/a&gt;es5中定义一个简单的类&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name=&lt;span class=&quot;string&quot;&gt;&#39;jpy&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age=&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; person = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.name);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;构造函数和原型链中增加方法&quot;&gt;&lt;a href=&quot;#构造函数和原型链中增加方法&quot; class=&quot;headerlink&quot; title=&quot;构造函数和原型链中增加方法&quot;&gt;&lt;/a&gt;构造函数和原型链中增加方法&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name=&lt;span class=&quot;string&quot;&gt;&#39;jpy&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age=&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.run = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name&amp;#125;&lt;/span&gt;在走路`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; person = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person.run();&lt;span class=&quot;comment&quot;&gt;// jpy在走路&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在原型链上定义属性和方法，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person.prototype.sex = &lt;span class=&quot;string&quot;&gt;&#39;男&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person.prototype.work = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name&amp;#125;&lt;/span&gt;在工作`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person.work();&lt;span class=&quot;comment&quot;&gt;// jpy在工作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;原型链上的属性和方法会被多个实例共享但是构造函数不会&lt;/p&gt;
&lt;h3 id=&quot;类中的静态方法&quot;&gt;&lt;a href=&quot;#类中的静态方法&quot; class=&quot;headerlink&quot; title=&quot;类中的静态方法&quot;&gt;&lt;/a&gt;类中的静态方法&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name=&lt;span class=&quot;string&quot;&gt;&#39;jpy&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age=&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person.getInfo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`姓名：&lt;span class=&quot;subst&quot;&gt;$&amp;#123;Person.name&amp;#125;&lt;/span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person.getInfo();&lt;span class=&quot;comment&quot;&gt;//姓名：jpy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Typescript" scheme="https://jpy920718.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>学习Typescript函数</title>
    <link href="https://jpy920718.github.io/2019/01/27/%E5%AD%A6%E4%B9%A0Typescript%E5%87%BD%E6%95%B0/"/>
    <id>https://jpy920718.github.io/2019/01/27/学习Typescript函数/</id>
    <published>2019-01-27T15:27:08.000Z</published>
    <updated>2019-06-11T16:22:37.833Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><h3 id="指定返回类型"><a href="#指定返回类型" class="headerlink" title="指定返回类型"></a>指定返回类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1函数声明法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>):<span class="title">string</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'run'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//2匿名函数法</span></span><br><span class="line">    <span class="keyword">let</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>):<span class="title">string</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'123'</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 没有返回值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>):<span class="title">void</span></span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'123'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*-----------*/</span></span><br><span class="line"><span class="comment">// 定义方法传参</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">name:string, age: number</span>): <span class="title">string</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fun(<span class="string">'jpy'</span>, <span class="number">27</span>); <span class="comment">//right</span></span><br><span class="line">    fun(<span class="string">'jpy'</span>, <span class="string">'27'</span>); <span class="comment">//fail</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> getInfo = <span class="function"><span class="keyword">function</span>(<span class="params">name: string,age:number</span>):<span class="title">string</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="ts中实参和形参必须一样，如果不一样需要配置可选参数-形参后面通过？来决定蚕食是否必传，如果有？则为可选参数，如果没有必传。"><a href="#ts中实参和形参必须一样，如果不一样需要配置可选参数-形参后面通过？来决定蚕食是否必传，如果有？则为可选参数，如果没有必传。" class="headerlink" title="ts中实参和形参必须一样，如果不一样需要配置可选参数,形参后面通过？来决定蚕食是否必传，如果有？则为可选参数，如果没有必传。"></a>ts中实参和形参必须一样，如果不一样需要配置可选参数,形参后面通过？来决定蚕食是否必传，如果有？则为可选参数，如果没有必传。</h3><blockquote><p>注：可选参数必须配置到参数的最后面</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name: string, age?: number</span>): <span class="title">string</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(age)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">getInfo(<span class="string">'jpy'</span>, <span class="number">12</span>);</span><br><span class="line">getInfo(<span class="string">'jpy'</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="ts-默认参数，在es5中是无法设置默认参数的，es6之后和ts中可以设置默认参数"><a href="#ts-默认参数，在es5中是无法设置默认参数的，es6之后和ts中可以设置默认参数" class="headerlink" title="ts 默认参数，在es5中是无法设置默认参数的，es6之后和ts中可以设置默认参数"></a>ts 默认参数，在es5中是无法设置默认参数的，es6之后和ts中可以设置默认参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name: string, number=<span class="number">20</span></span>):<span class="title">string</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>---<span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line">getInfo(<span class="string">'jpy'</span>);</span><br><span class="line">getInfo(<span class="string">'jpy'</span>, <span class="number">32</span>)</span><br></pre></td></tr></table></figure><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...三点运算符</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...result: number[]</span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span> ;</span><br><span class="line">    result.map(<span class="function"><span class="params">item</span> =&gt;</span> sum+=item)</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">//6</span></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a: number, ...result: number[]</span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = a ;</span><br><span class="line">    result.map(<span class="function"><span class="params">item</span> =&gt;</span> sum+=item)</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">//6</span></span><br></pre></td></tr></table></figure><h3 id="ts函数重载-。"><a href="#ts函数重载-。" class="headerlink" title="ts函数重载 。"></a>ts函数重载 。</h3><p>Java中函数重载，两个或者以上的函数名相同，但参数不同的函数叫做重载；typescript为了兼容es5以及es6重载的写法和java有区别。 在es5中出现同名的方法，后面的会替换前面的方法。ts中的重载，同样的方法，传入不同参数，执行不同的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name: string</span>):<span class="title">string</span>;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">getInfo</span>(<span class="params">age:number</span>):<span class="title">number</span></span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">getInfo</span>(<span class="params">str:any</span>):<span class="title">any</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> str === <span class="string">'string'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`名字：<span class="subst">$&#123;str&#125;</span>`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> str === <span class="string">'number'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`年龄：<span class="subst">$&#123;str&#125;</span>`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'类型错误'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">getInfo(<span class="string">'jpy'</span>);<span class="comment">//right</span></span><br><span class="line">getInfo(<span class="number">18</span>);<span class="comment">//right</span></span><br><span class="line">getInfo(<span class="literal">true</span>);<span class="comment">//fail</span></span><br></pre></td></tr></table></figure><blockquote><p>以上ts代码经过编译后会变成如下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> str === <span class="string">'string'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`名字：<span class="subst">$&#123;str&#125;</span>`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> str === <span class="string">'number'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`年龄：<span class="subst">$&#123;str&#125;</span>`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'类型错误'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="箭头函数-this指向上下文"><a href="#箭头函数-this指向上下文" class="headerlink" title="箭头函数 this指向上下文"></a>箭头函数 this指向上下文</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数定义&quot;&gt;&lt;a href=&quot;#函数定义&quot; class=&quot;headerlink&quot; title=&quot;函数定义&quot;&gt;&lt;/a&gt;函数定义&lt;/h2&gt;&lt;h3 id=&quot;指定返回类型&quot;&gt;&lt;a href=&quot;#指定返回类型&quot; class=&quot;headerlink&quot; title=&quot;指定返回类型&quot;&gt;&lt;/a&gt;指定返回类型&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1函数声明法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fun&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;):&lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;run&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//2匿名函数法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; fun = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;):&lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;123&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 没有返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fun&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;):&lt;span class=&quot;title&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;123&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*-----------*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 定义方法传参&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fun&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name:string, age: number&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;---&lt;span class=&quot;subst&quot;&gt;$&amp;#123;age&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fun(&lt;span class=&quot;string&quot;&gt;&#39;jpy&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//right&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fun(&lt;span class=&quot;string&quot;&gt;&#39;jpy&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;27&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//fail&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; getInfo = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name: string,age:number&lt;/span&gt;):&lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;---&lt;span class=&quot;subst&quot;&gt;$&amp;#123;age&amp;#125;&lt;/span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;ts中实参和形参必须一样，如果不一样需要配置可选参数-形参后面通过？来决定蚕食是否必传，如果有？则为可选参数，如果没有必传。&quot;&gt;&lt;a href=&quot;#ts中实参和形参必须一样，如果不一样需要配置可选参数-形参后面通过？来决定蚕食是否必传，如果有？则为可选参数，如果没有必传。&quot; class=&quot;headerlink&quot; title=&quot;ts中实参和形参必须一样，如果不一样需要配置可选参数,形参后面通过？来决定蚕食是否必传，如果有？则为可选参数，如果没有必传。&quot;&gt;&lt;/a&gt;ts中实参和形参必须一样，如果不一样需要配置可选参数,形参后面通过？来决定蚕食是否必传，如果有？则为可选参数，如果没有必传。&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;注：可选参数必须配置到参数的最后面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getInfo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name: string, age?: number&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(age)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;---&lt;span class=&quot;subst&quot;&gt;$&amp;#123;age&amp;#125;&lt;/span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getInfo(&lt;span class=&quot;string&quot;&gt;&#39;jpy&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getInfo(&lt;span class=&quot;string&quot;&gt;&#39;jpy&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Typescript" scheme="https://jpy920718.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>学习Typescript类型</title>
    <link href="https://jpy920718.github.io/2019/01/27/%E5%AD%A6%E4%B9%A0Typescript%E7%B1%BB%E5%9E%8B/"/>
    <id>https://jpy920718.github.io/2019/01/27/学习Typescript类型/</id>
    <published>2019-01-27T14:37:39.000Z</published>
    <updated>2019-06-11T16:22:37.834Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Typescript-数据类型"><a href="#Typescript-数据类型" class="headerlink" title="Typescript 数据类型"></a>Typescript 数据类型</h3><ul><li>boolean</li><li>number</li><li>string</li><li>array</li><li>null 和 undefined</li><li>tuple</li><li>enum</li><li>any</li><li>void</li><li>nerver</li></ul><h4 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">let</span> bool = <span class="literal">true</span>; <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bool: boolean = <span class="literal">true</span>; <span class="comment">//正确</span></span><br></pre></td></tr></table></figure><h4 id="number"><a href="#number" class="headerlink" title="number"></a>number</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//number</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">321</span>; <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num: number = <span class="number">321</span>; <span class="comment">// Right</span></span><br></pre></td></tr></table></figure><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//string</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'jpy'</span>; <span class="comment">// Fail</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str:string = <span class="string">'jpy'</span>; <span class="comment">// right</span></span><br></pre></td></tr></table></figure><h4 id="array-ts中定义数组有三种种方式"><a href="#array-ts中定义数组有三种种方式" class="headerlink" title="array ts中定义数组有三种种方式"></a>array ts中定义数组有三种种方式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//array</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];<span class="comment">// fail</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义数组并且指定数组里的元素都是number类型</span></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="keyword">let</span> arr:number[]= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]; <span class="comment">//right</span></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="keyword">let</span> arr:<span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];<span class="comment">// right</span></span><br><span class="line"><span class="comment">// 第三章</span></span><br><span class="line"><span class="keyword">let</span> arr:any[] = [<span class="number">1</span>,<span class="string">'32'</span>,<span class="literal">true</span>,<span class="number">34</span>]; <span class="comment">//right</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="undefined-和-null"><a href="#undefined-和-null" class="headerlink" title="undefined 和 null"></a>undefined 和 null</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">let</span> num: number | <span class="literal">undefined</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//undefined</span></span><br><span class="line">num = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//null 一个元素可能是number 可能是null 可能是 undefined</span></span><br><span class="line"><span class="keyword">let</span> num: number | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h4 id="元祖类型（tuple）属于数组的一种，定义一个数组里元素要么可以是number又可以是string这时候就可以用元祖类型-给数组中每一个元素指定类型。"><a href="#元祖类型（tuple）属于数组的一种，定义一个数组里元素要么可以是number又可以是string这时候就可以用元祖类型-给数组中每一个元素指定类型。" class="headerlink" title="元祖类型（tuple）属于数组的一种，定义一个数组里元素要么可以是number又可以是string这时候就可以用元祖类型,给数组中每一个元素指定类型。"></a>元祖类型（tuple）属于数组的一种，定义一个数组里元素要么可以是number又可以是string这时候就可以用元祖类型,给数组中每一个元素指定类型。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Tuple</span></span><br><span class="line"><span class="keyword">let</span> arr:[number,string] = [<span class="number">1</span>,<span class="string">'233'</span>]; <span class="comment">//right</span></span><br><span class="line"><span class="keyword">let</span> arr:[number,string] = [<span class="number">11</span>, <span class="number">33</span>]; <span class="comment">//fail</span></span><br></pre></td></tr></table></figure><h4 id="enum-枚举类型-通过使用自然语言中含义清楚的单词来表示它的每个值，这种方法叫做枚举方法，用这种方法定义的类型叫做枚举类型"><a href="#enum-枚举类型-通过使用自然语言中含义清楚的单词来表示它的每个值，这种方法叫做枚举方法，用这种方法定义的类型叫做枚举类型" class="headerlink" title="enum 枚举类型 通过使用自然语言中含义清楚的单词来表示它的每个值，这种方法叫做枚举方法，用这种方法定义的类型叫做枚举类型"></a>enum 枚举类型 通过使用自然语言中含义清楚的单词来表示它的每个值，这种方法叫做枚举方法，用这种方法定义的类型叫做枚举类型</h4><p>写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum 枚举名&#123;</span><br><span class="line">    标识符[=整型常数],</span><br><span class="line">    标识符[=整型常数],</span><br><span class="line">    ...</span><br><span class="line">    标识符[=整型常数],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// enum</span></span><br><span class="line">enum Type &#123;</span><br><span class="line">    success=<span class="number">1</span>,</span><br><span class="line">    error=<span class="number">-1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> result:Type = Type.success</span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">enum Color&#123;</span><br><span class="line">    red,</span><br><span class="line">    origin,</span><br><span class="line">    blue</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.blue;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">//2 如果标识符没有赋值，它的值就是下标</span></span><br></pre></td></tr></table></figure><h4 id="any-任意类型"><a href="#any-任意类型" class="headerlink" title="any 任意类型"></a>any 任意类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num: any = <span class="number">123</span>; <span class="comment">//right</span></span><br><span class="line">num = <span class="string">'123'</span>; <span class="comment">//right</span></span><br><span class="line">num = <span class="literal">true</span>; <span class="comment">//right</span></span><br></pre></td></tr></table></figure><h4 id="void-没有任何类型-一般用于定义方法没有返回值"><a href="#void-没有任何类型-一般用于定义方法没有返回值" class="headerlink" title="void 没有任何类型 一般用于定义方法没有返回值"></a>void 没有任何类型 一般用于定义方法没有返回值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法没有返回任何类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>):<span class="title">void</span></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是错误写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>);<span class="comment">//fail</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fuc</span>(<span class="params"></span>): <span class="title">undefined</span></span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>);<span class="comment">//fail</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="nerver-从不会出现的值-是其他类型的子类型包括null和undefined-一般不会使用。"><a href="#nerver-从不会出现的值-是其他类型的子类型包括null和undefined-一般不会使用。" class="headerlink" title="nerver 从不会出现的值 是其他类型的子类型包括null和undefined; 一般不会使用。"></a>nerver 从不会出现的值 是其他类型的子类型包括null和undefined; 一般不会使用。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//nerver</span></span><br><span class="line"><span class="keyword">let</span> a:nerver;</span><br><span class="line">a = <span class="number">123</span>;<span class="comment">// fail</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正确</span></span><br><span class="line">a = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'错误'</span>)；</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Typescript-数据类型&quot;&gt;&lt;a href=&quot;#Typescript-数据类型&quot; class=&quot;headerlink&quot; title=&quot;Typescript 数据类型&quot;&gt;&lt;/a&gt;Typescript 数据类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;array&lt;/li&gt;
&lt;li&gt;null 和 undefined&lt;/li&gt;
&lt;li&gt;tuple&lt;/li&gt;
&lt;li&gt;enum&lt;/li&gt;
&lt;li&gt;any&lt;/li&gt;
&lt;li&gt;void&lt;/li&gt;
&lt;li&gt;nerver&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;boolean&quot;&gt;&lt;a href=&quot;#boolean&quot; class=&quot;headerlink&quot; title=&quot;boolean&quot;&gt;&lt;/a&gt;boolean&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// boolean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; bool = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; bool: boolean = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//正确&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;number&quot;&gt;&lt;a href=&quot;#number&quot; class=&quot;headerlink&quot; title=&quot;number&quot;&gt;&lt;/a&gt;number&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;321&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; num: number = &lt;span class=&quot;number&quot;&gt;321&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// Right&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;string&quot;&gt;&lt;a href=&quot;#string&quot; class=&quot;headerlink&quot; title=&quot;string&quot;&gt;&lt;/a&gt;string&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; str = &lt;span class=&quot;string&quot;&gt;&#39;jpy&#39;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// Fail&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; str:string = &lt;span class=&quot;string&quot;&gt;&#39;jpy&#39;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// right&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;array-ts中定义数组有三种种方式&quot;&gt;&lt;a href=&quot;#array-ts中定义数组有三种种方式&quot; class=&quot;headerlink&quot; title=&quot;array ts中定义数组有三种种方式&quot;&gt;&lt;/a&gt;array ts中定义数组有三种种方式&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;// fail&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义数组并且指定数组里的元素都是number类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//第一种&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arr:number[]= [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//right&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//第二种&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arr:&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;&amp;lt;number&amp;gt; = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;// right&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第三章&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arr:any[] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;32&#39;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//right&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Typescript" scheme="https://jpy920718.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>本地分支被删如何快速恢复</title>
    <link href="https://jpy920718.github.io/2019/01/23/%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E8%A2%AB%E5%88%A0%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%81%A2%E5%A4%8D/"/>
    <id>https://jpy920718.github.io/2019/01/23/本地分支被删如何快速恢复/</id>
    <published>2019-01-23T08:14:56.000Z</published>
    <updated>2019-06-11T16:22:37.835Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本地分支被删如何快速恢复"><a href="#本地分支被删如何快速恢复" class="headerlink" title="本地分支被删如何快速恢复"></a>本地分支被删如何快速恢复</h3><ol><li><p>列之前所有的commit</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -g</span><br></pre></td></tr></table></figure></li><li><p>记录查找到的commit_id号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch 分支名 commit_id</span><br></pre></td></tr></table></figure></li><li><p>切换到刚刚的分支名查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout 分支名</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本地分支被删如何快速恢复&quot;&gt;&lt;a href=&quot;#本地分支被删如何快速恢复&quot; class=&quot;headerlink&quot; title=&quot;本地分支被删如何快速恢复&quot;&gt;&lt;/a&gt;本地分支被删如何快速恢复&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;列之前所有的commit&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;记录查找到的commit_id号&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git branch 分支名 commit_id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;切换到刚刚的分支名查看&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git checkout 分支名&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://jpy920718.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>学学小程序之--小程序模板及include和import的区别</title>
    <link href="https://jpy920718.github.io/2019/01/22/%E5%AD%A6%E5%AD%A6%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B--%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A8%A1%E6%9D%BF%E5%8F%8Ainclude%E5%92%8Cimport%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://jpy920718.github.io/2019/01/22/学学小程序之--小程序模板及include和import的区别/</id>
    <published>2019-01-22T14:26:26.000Z</published>
    <updated>2019-06-11T16:22:37.834Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小程序中模板的定义"><a href="#小程序中模板的定义" class="headerlink" title="小程序中模板的定义"></a>小程序中模板的定义</h3><p>name 模板的名称<br>is声明使用哪个模板，通过data向模板传入信息，只能通过data传入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// index.wxml</span><br><span class="line">&lt;template name=<span class="string">"tempItem"</span>&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">        &lt;view&gt;收件人：&#123;&#123;name&#125;&#125;&lt;/view&gt;</span><br><span class="line">        &lt;view&gt;联系方式：&#123;&#123;phone&#125;&#125;&lt;/view&gt;</span><br><span class="line">        &lt;view&gt;地址：&#123;&#123;address&#125;&#125;&lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template is=<span class="string">"tempItem"</span> data=<span class="string">"&#123;&#123;...info&#125;&#125;"</span>&gt;&lt;/template&gt;</span><br><span class="line">//index.js</span><br><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        info: &#123;</span><br><span class="line">            name: <span class="string">'张三'</span>,</span><br><span class="line">            phone:<span class="string">'123232323'</span>,</span><br><span class="line">            address: <span class="string">'中国'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="小程序模板引用include和include"><a href="#小程序模板引用include和include" class="headerlink" title="小程序模板引用include和include"></a>小程序模板引用include和include</h3><h4 id="inport只会引用template内的的内容，动态的传入数据，is表示引用的模板名称，data表示传入模板的数据-不要死循环应用模板"><a href="#inport只会引用template内的的内容，动态的传入数据，is表示引用的模板名称，data表示传入模板的数据-不要死循环应用模板" class="headerlink" title="inport只会引用template内的的内容，动态的传入数据，is表示引用的模板名称，data表示传入模板的数据, 不要死循环应用模板"></a>inport只会引用template内的的内容，动态的传入数据，is表示引用的模板名称，data表示传入模板的数据, 不要死循环应用模板</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// index.wxml</span><br><span class="line">&lt;import src=<span class="string">"a.wxml"</span>&gt;&lt;/import&gt;</span><br><span class="line">&lt;template is=<span class="string">"a"</span>&gt;&lt;/template&gt;</span><br><span class="line">// a.wxml</span><br><span class="line">&lt;view&gt;</span><br><span class="line">    a里的helloword</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;template name=<span class="string">"a"</span>&gt;a的模板里的helloword！！ &lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="include只会引用除template内容外的内容"><a href="#include只会引用除template内容外的内容" class="headerlink" title="include只会引用除template内容外的内容"></a>include只会引用除template内容外的内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//index.wxml</span><br><span class="line">&lt;include src=<span class="string">"a.wxml"</span>&gt;&lt;/include&gt;</span><br><span class="line">&lt;template is=<span class="string">"a"</span>&gt;&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">//a.wxml</span><br><span class="line">&lt;template name=<span class="string">'a'</span>&gt;</span><br><span class="line">    &lt;view&gt;模板内容&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">    模板外的内容</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;小程序中模板的定义&quot;&gt;&lt;a href=&quot;#小程序中模板的定义&quot; class=&quot;headerlink&quot; title=&quot;小程序中模板的定义&quot;&gt;&lt;/a&gt;小程序中模板的定义&lt;/h3&gt;&lt;p&gt;name 模板的名称&lt;br&gt;is声明使用哪个模板，通过data向模板传入信息，只能通过data传入&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// index.wxml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;template name=&lt;span class=&quot;string&quot;&gt;&quot;tempItem&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;view&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;view&amp;gt;收件人：&amp;#123;&amp;#123;name&amp;#125;&amp;#125;&amp;lt;/view&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;view&amp;gt;联系方式：&amp;#123;&amp;#123;phone&amp;#125;&amp;#125;&amp;lt;/view&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;view&amp;gt;地址：&amp;#123;&amp;#123;address&amp;#125;&amp;#125;&amp;lt;/view&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/view&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;template is=&lt;span class=&quot;string&quot;&gt;&quot;tempItem&quot;&lt;/span&gt; data=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#123;...info&amp;#125;&amp;#125;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//index.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Page(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        info: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name: &lt;span class=&quot;string&quot;&gt;&#39;张三&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            phone:&lt;span class=&quot;string&quot;&gt;&#39;123232323&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            address: &lt;span class=&quot;string&quot;&gt;&#39;中国&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;小程序模板引用include和include&quot;&gt;&lt;a href=&quot;#小程序模板引用include和include&quot; class=&quot;headerlink&quot; title=&quot;小程序模板引用include和include&quot;&gt;&lt;/a&gt;小程序模板引用include和include&lt;/h3&gt;&lt;h4 id=&quot;inport只会引用template内的的内容，动态的传入数据，is表示引用的模板名称，data表示传入模板的数据-不要死循环应用模板&quot;&gt;&lt;a href=&quot;#inport只会引用template内的的内容，动态的传入数据，is表示引用的模板名称，data表示传入模板的数据-不要死循环应用模板&quot; class=&quot;headerlink&quot; title=&quot;inport只会引用template内的的内容，动态的传入数据，is表示引用的模板名称，data表示传入模板的数据, 不要死循环应用模板&quot;&gt;&lt;/a&gt;inport只会引用template内的的内容，动态的传入数据，is表示引用的模板名称，data表示传入模板的数据, 不要死循环应用模板&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// index.wxml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;import src=&lt;span class=&quot;string&quot;&gt;&quot;a.wxml&quot;&lt;/span&gt;&amp;gt;&amp;lt;/import&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;template is=&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;&amp;gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// a.wxml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;view&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a里的helloword&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/view&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;template name=&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;&amp;gt;a的模板里的helloword！！ &amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;include只会引用除template内容外的内容&quot;&gt;&lt;a href=&quot;#include只会引用除template内容外的内容&quot; class=&quot;headerlink&quot; title=&quot;include只会引用除template内容外的内容&quot;&gt;&lt;/a&gt;include只会引用除template内容外的内容&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//index.wxml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;include src=&lt;span class=&quot;string&quot;&gt;&quot;a.wxml&quot;&lt;/span&gt;&amp;gt;&amp;lt;/include&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;template is=&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;&amp;gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//a.wxml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;template name=&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;view&amp;gt;模板内容&amp;lt;/view&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;view&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    模板外的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/view&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="小程序" scheme="https://jpy920718.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Typescript 泛型 类型变量 T</title>
    <link href="https://jpy920718.github.io/2019/01/07/Typescript%20%E6%B3%9B%E5%9E%8B%20%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%20T/"/>
    <id>https://jpy920718.github.io/2019/01/07/Typescript 泛型 类型变量 T/</id>
    <published>2019-01-07T01:49:40.000Z</published>
    <updated>2019-06-11T16:22:37.831Z</updated>
    
    <content type="html"><![CDATA[<p>类型变量：确保输出的返回值与传入的形参的类型一致，它是一种特殊的变量，表示类型不表示值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过给函数添加了类型变量 T 。T 可以捕获用户传入的类型，使用 T 作为返回值的类型。这样就可以知道发返回值的类型和参数类型是一致的。</p><p>把可以适用于多种类型的函数称为泛型函数。</p><p>我们可以使用两种方式来使用泛型函数</p><ul><li><p>第一种：明确指定 T 为string类型, 并传递一个string参数给函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func&lt;string&gt;(<span class="string">'123'</span>)</span><br></pre></td></tr></table></figure></li><li><p>第二种：利用类型推论，编译器根据传入的参数自动确定 T 的类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func(<span class="number">123</span>);</span><br><span class="line">func(<span class="string">'123'</span>);</span><br></pre></td></tr></table></figure></li></ul><p>不一定使用尖括号明确指定传入参数的类型，编译器可以自己判断传入参数的类型，然后将 T 设置为传入参数的类型。<br>如果编译器不能自动的推断出类型的话，只能明确传入 T 的类型。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类型变量：确保输出的返回值与传入的形参的类型一致，它是一种特殊的变量，表示类型不表示值。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;params&quot;&gt;arg: T&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;通过给函数添加了类型变量 T 。T 可以捕获用户传入的类型，使用 T 作为返回值的类型。这样就可以知道发返回值的类型和参数类型是一致的。&lt;/p&gt;
&lt;p&gt;把可以适用于多种类型的函数称为泛型函数。&lt;/p&gt;
&lt;p&gt;我们可以使用两种方式来使用泛型函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一种：明确指定 T 为string类型, 并传递一个string参数给函数&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func&amp;lt;string&amp;gt;(&lt;span class=&quot;string&quot;&gt;&#39;123&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二种：利用类型推论，编译器根据传入的参数自动确定 T 的类型&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func(&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func(&lt;span class=&quot;string&quot;&gt;&#39;123&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不一定使用尖括号明确指定传入参数的类型，编译器可以自己判断传入参数的类型，然后将 T 设置为传入参数的类型。&lt;br&gt;如果编译器不能自动的推断出类型的话，只能明确传入 T 的类型。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Typescript" scheme="https://jpy920718.github.io/tags/Typescript/"/>
    
  </entry>
  
</feed>
